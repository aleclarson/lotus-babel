// Generated by CoffeeScript 1.12.4
var crawlModule, emptyFunction, fs, ignored, initModule, isMatch, path, transformFiles;

isMatch = require("micromatch").isMatch;

emptyFunction = require("emptyFunction");

path = require("path");

fs = require("fsx");

transformFiles = require("./transformFiles");

initModule = require("./initModule");

ignored = "{.git,node_modules,__tests__,__mocks__,__fixtures__}";

crawlModule = function(mod) {
  if (!mod.src) {
    log.warn("Missing source root!");
    return Promise.resolve([]);
  }
  return mod.crawl(path.join(mod.src, "**", "*"), {
    ignore: path.join("**", ignored, "**")
  });
};

exports.babel = function(options) {
  var modNames, sourceFiles;
  modNames = options._;
  if (!modNames.length) {
    modNames.push(".");
  }
  sourceFiles = [];
  return Promise.chain(modNames, function(modName) {
    var mod;
    mod = lotus.modules.load(modName);
    return initModule(mod).then(function(sourceGlobs) {
      var destRoot, sourceRoot;
      sourceRoot = mod.src;
      destRoot = mod.dest;
      return crawlModule(mod).then(function(files) {
        log.it("files.length = " + files.length);
        return files.forEach(function(file) {
          var destPath, glob, i, len, sourcePath;
          for (i = 0, len = sourceGlobs.length; i < len; i++) {
            glob = sourceGlobs[i];
            if (isMatch(file.path, glob)) {
              sourceFiles.push(file);
              return;
            }
          }
          sourcePath = path.relative(sourceRoot, file.path);
          destPath = path.join(destRoot, sourcePath);
          fs.writeDir(path.dirname(destPath));
          fs.writeFile(destPath, fs.readFile(file.path));
          log.moat(0);
          log.white("Copied: ");
          log.green(sourcePath);
          log.moat(0);
        });
      });
    }).fail(function(error) {
      log.moat(1);
      log.white("A module threw an error: ");
      log.red(lotus.relative(mod.path));
      log.moat(0);
      log.gray(error.stack);
      return log.moat(1);
    });
  }).then(function() {
    return transformFiles(sourceFiles, options);
  });
};
